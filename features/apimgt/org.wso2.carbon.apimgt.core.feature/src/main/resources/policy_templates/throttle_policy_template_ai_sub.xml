		@Plan:name('${policy.getTenantDomain()}_sub_${policy.getName()}')
		@Plan:description('ExecutionPlan for sub_${policy.getName()}')
		@Import('org.wso2.throttle.processed.request.stream:1.0.0')
		define stream RequestStream (messageID string, appKey string, appTier string, subscriptionKey string, apiKey string, apiTier string, subscriptionTier string, resourceKey string, resourceTier string, userId string,  apiContext string, apiVersion string, appTenant string, apiTenant string, appId string, apiName string, propertiesMap string);

		@Export('org.wso2.throttle.globalThrottle.stream:1.0.0')
		define stream GlobalThrottleStream (throttleKey string, isThrottled bool, expiryTimeStamp long);

		FROM RequestStream
		SELECT messageID, (apiTenant == '$policy.getTenantDomain()' and subscriptionTier == '$policy.getName()') AS isEligible, subscriptionKey AS throttleKey, propertiesMap
		INSERT INTO EligibilityStream;

		#if($quotaPolicy != "")
		FROM EligibilityStream[isEligible==true]#throttler:timeBatch($quotaPolicy.getLimit().getUnitTime() $quotaPolicy.getLimit().getTimeUnit(), 0)
		select throttleKey,
		#if($quotaPolicy.getLimit().getRequestCount() != 0)
		ifThenElse((count(messageID) >= $quotaPolicy.getLimit().getRequestCount()), true,
		#end
		#if($quotaPolicy.getAiApiQuota().getPromptTokenCount() != 0)
		ifThenElse((sum(cast(map:get(propertiesMap,'PROMPT_TOKENS'),'long')) >= $quotaPolicy.getAiApiQuota().getPromptTokenCount()L), true,
		#end
		#if($quotaPolicy.getAiApiQuota().getCompletionTokenCount() != 0)
		ifThenElse((sum(cast(map:get(propertiesMap,'COMPLETION_TOKENS'),'long')) >= $quotaPolicy.getAiApiQuota().getCompletionTokenCount()L), true,
		#end
		#if($quotaPolicy.getAiApiQuota().getTotalTokenCount() != 0)
		ifThenElse((sum(cast(map:get(propertiesMap,'TOTAL_TOKENS'),'long')) >= $quotaPolicy.getAiApiQuota().getTotalTokenCount()L), true,
		#end
				false)
		#if($quotaPolicy.getAiApiQuota().getPromptTokenCount() != 0)
		)
		#end
		#if($quotaPolicy.getAiApiQuota().getCompletionTokenCount() != 0)
		)
		#end
		#if($quotaPolicy.getRequestCountLimit().getRequestCount() != 0)
		)
		#end
		#if($quotaPolicy.getAiApiQuota().getTotalTokenCount() != 0)
		)
		#end
		as isThrottled, expiryTimeStamp
		group by throttleKey
		INSERT ALL EVENTS into ResultStream;
		#end

		from ResultStream#throttler:emitOnStateChange(throttleKey, isThrottled)
		select *
		insert into GlobalThrottleStream;